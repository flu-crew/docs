
Methods for manipulating FASTA files

== smof - Simple Manipulation Of Fasta

`smof` is a broad set of CLI tools for working with fasta files. It can be
installed through `pip`:

[source,bash]
----
pip install smof
----

If you are on a MacOS, you may need to use `pip3` instead. `smof` works on
Linux, MacOS, and Windows. The only dependency is Python v3.4 or greater.

A summary of the tools it includes can be accessed by calling `smof -h` in the
terminal.  Here is the usage statement (as of v0.19.0):

----
usage: <fastafile> | smof <subcommand> <options>

Tools for studying and manipulating fasta files

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit

subcommands:
  [ for help on each: smof <subcommand> -h ]
    cut                 emulates UNIX cut command, where fields are entries
    clean               cleans fasta files
    consensus           finds the consensus sequence for aligned sequence
    filter              extracts sequences meeting the given conditions
    grep                roughly emulates the UNIX grep command
    md5sum              calculate an md5 checksum for the input sequences
    head                writes the first sequences in a file
    permute             randomly order sequence
    reverse             reverse each sequence (or reverse complement)
    sample              randomly select entries from fasta file
    sniff               extract info about the sequence
    sort                sort sequences
    split               split a fasta file into smaller files
    stat                calculate sequence statistics
    subseq              extract subsequence from each entry (revcomp if a<b)
    tail                writes the last sequences in a file
    translate           translate a DNA sequence into a protein sequence
    uniq                count, omit, or merge repeated entries
    wc                  roughly emulates the UNIX wc command

Project site: https://github.com/incertae-sedis/smof
Report bugs/requests via https://github.com/incertae-sedis/smof/issues
Author: Zebulun Arendsee (zbwrnz@gmail.com)
----

Detailed information about each subcommand can be accessed with `smof
<subcommand> -h`, for example:

----
$ smof stat -h 

usage: <fastafile> | smof stat <options>

The default action is to count the lengths of all sequences and output summary
statistics including: 1) the number of sequences, 2) the number of characters,
3) the five-number summary of sequence lengths (minimum, 25th quantile, median,
75th quantile, and maximum), 4) the mean and standard deviation of lengths, and
5) the N50 (if you don't know what that is, you don't need to know).

positional arguments:
  INPUT                 input fasta sequence (default = stdin)

optional arguments:
  -h, --help            show this help message and exit
  -d DELIMITER, --delimiter DELIMITER
                        output delimiter
  -q, --byseq           write a line for each sequence
  -I, --case-sensitive  match case
  -m, --count-lower     count the number of lowercase characters
  -c, --counts          write counts of all characters
  -t, --type            guess sequence type
  -l, --length          write sequence length
  -p, --proportion      write proportion of each character
  -C, --aa-profile      display protein profile
  -g, --hist            write ascii histogram of sequence lengths
  -G, --log-hist        write ascii histogram of sequence log2 lengths
----

For more information on `smof`, visit the repo at url:[https://github.com/incertae-sedis/smof].

While `smof` may have an overwelming number of features, there are just a few
that you will be likely to use in day-to-day influenza analysis. I will
introduce just a few below.

 1. `smof stat` - I use this all the time to just count the sequences in a
 fasta file and check for oddly-sized entries.

 2. `smof sniff` - The output for this one is a bit cryptic (see `smof sniff
 -h`), but it will tell you if there are repeated sequences, how many of the
 sequences appear to be DNA or protein, whether there are internal stops in a
 protein sequence, and whether any sequences contain illegal characters. It is
 a good idea to run a FASTA file through sniff just to be sure went South in
 your (or someone elses) scripting.

 3. `smof translate -f` - Translate the longest coding frame. This works
 perfectly for translating flu segments to proteins. Before using `smof` for
 this purpose, we had to manually align sequences in Geneious, trim them, and
 then translate them.
   * `-c` - add this flag want the untranslated codon sequence
   * `-s` - add this flag if you want the translation to begin with a START codon

 4. `smof uniq -f` - If any entries have duplicate headers, keep only the
 first. Some programs, such as FastTree, will die if there are any duplicate
 headers. This command is a fast-and-dirty way to remove these duplicates.

 5. `smof uniq -p -z "___"` - Combine entries with identical sequence by
 concatenating the headers. I use '___' as the header separater since it is
 easy to see and unlikely to appear in a normal header. Often I will grep out
 the combined headers +grep '___' myfile.fasta+ to see what has been combined.
 Then I may either remove the duplicate header info (`sed 's/___.*//'`) or open
 the fasta in an editor and manually choose what information to include.

 6. `smof clean -ux` - Clean up a fasta file, remove any inserted gaps, wrap at
 80 characters, convert to uppercase, remove any Windows carriage returns. For
 DNA sequence, I usually run `smof clean -t n -uxdr`. The `-t n` tells `smof`
 that the sequence is nucleotides, the `-d` flag will convert 'X' to 'N' and
 irregular gaps ('.' or '_') to regular gaps '-', and the `-r` command converts
 ambiguous nucleotides to `N` (don't do this if you intend to translate the
 sequence, since `smof translate` will use ambiguous nucleotides to yield an
 unambiguous amino acid, when possible).

 6. `smof consensus` - Create the consensus sequence of an alignment.

 7. `smof grep -P` - Extract entries that match a pattern against the header. For
 example, `smof grep -P "2020-..-.." myfile.fna` will extract entries from the
 year 2020.

 8. `smof grep -q` - Extract entries or regions that match a pattern in the
 sequence. There are many, many options for smof sequence grep and I use most
 of them regularly.  For more details, I would recommend you visit the smof
 home page.

== Motif extraction

Amino acid motifs are frequently of interest. Examples include the antigenic
motifs of HA cite:[liu2018antigenic]. The HA1 and HA2 subunits of the HA gene
can also be thought of as motifs that we may want to extract from a sequences.

Motifs may be extracted if we know the motif pattern in a reference gene and
then align this reference against other sequences. Then we can manually trim
the alignment (e.g., in Geneious) to get just the motif for each sequence.

This manual approach can be automated, as follows:

 1. Align many sequences (along with references).

 2. Use a regular expression to find the location of the HA1 region in a subset of the sequences.

 3. Extract this location from each sequence in the alignment

This approach is very robust against deviation from the expected HA1 pattern
encoded in the regular expression. So long as the expression matches the
correct HA1 region more often than it matches any particular other region, then
the correct region will be extracted.

Using MAFFT for alignment and `smof` for sequence manipulation, this process
can be accomplished as follows:

[source,bash]
----
# translate the longest coding sequence (initial ATG is not required)
smof translate -f flu.fna > flu.faa

# align the protein sequences
mafft flu.faa > flu.aln

# extract the positions of $MOTIF as a GFF file
smof grep -qgoP --gff $MOTIF flu.faa > flu-motif.gff

# find the most common interval that $MOTIF matches
bounds=$(cut -f4,5 flu-motif.gff | sort | uniq -c | sort -rg | head)

# extract the most common interval from the alignment
smof subseq -b $bounds flu.aln > motif.faa
----


== `flutile` - specialized tools for influenza

`flutile` is a python package and command line utility that, like `smof`, can
be installed through pip: `pip install flutile` (maybe use `pip3` on MacOS).

=== HA1 extraction

Publicly available HA segment sequences are inconsistent with regards to what
part of the gene the include. Some include DNA before the start codon, some
begin at the start codon, some begin after the start codon. This variety
introduces non-biological noise into phylogenetic studies. Furthermore, the HA
protein is processed after translation to remove the initial signal peptide and
to cut the protein into two subunits, HA1 and HA2. For phylogenetic work, we
usually focus on HA1. For more consistent phylogenetic results, it is good
practice to trim the HA DNA sequences to the part that codes for HA1.

`flutile trim` can extract HA1 regions for H1 and H3 sequences (handling for
the other HA subtypes could be easily added given a reference strain and
motifs). `flutile` finds the HA1 by aligning the input sequences against the
reference sequence (California/07/2009) and then extracting from the alignment
the regions that map to the reference HA1. This will correctly find HA1 regions
even if they are truncated. Here are a few examples:

[source bash]
----
# DNA input to AA HA1
flutile trim h1-ha1 --conversion=dna2aa myfile.fna
# DNA input to DNA output
flutile trim h1-ha1 --conversion=dna2dna myfile.fna
# AA input to AA output
flutile trim h1-ha1 --conversion=aa2dna myfile.faa
----

For tree building, the `--conversion=dna2dna` option is strongly recommended.

To build a gamma tree from the octoFLU reference file, for example, we might use the following command:

[source bash]
----
cat reference.fa |  # open the reference file
  smof grep 1A.3.3.3 |  # extract the strains with a gamma HA
  smof grep "|H1|" |  # extract the H1's
  flutile trim h1-ha1 --conversion=dna2dna |  # trim to HA1 region
  mafft /dev/stdin |  # realign the DNA
  FastTree -nt -gtr -gamma > gamma.tre
----

The realignment is needed since the alignment `flutile` makes internally is of
translated inputs against the protein reference.


=== `flutile` and aadiff table generation

`flutile aadiff` takes a multiple-sequence alignment as an input and creates a
character difference table. This command is designed for preparing amino acid
difference tables. Below is an example of a comparison of 4 H1 sequences.

`flutile aadiff --subtype=H1 mufile.faa`

.`flutile aadiff` output
|===
| site  | A02479030 | SD0246 | SD0272 | SD0136

| -3    | A         |        | T      |

| -2    | N         |        | S      |

| -1    | A         | T      |        |

| 1     | D         |        |        |

| 154   | K         |        |        |

| 154+1 | -         |        |        | X

| 154+2 | -         |        |        | X

| 155   | D         | S      |        | X

| 156   | D         | G      | N      | X
|===


The `--subtype=H1` argument tells `flutile` to align the inputs against an H1
reference (A/United Kingdom/1/1933). The reference is used to determine
relative indices (the `sites` column). The index reference is used only for
indexing and does not appear in the final table. The first three rows (sites
-3, -2, -1) align to the three residues at the end of the signal peptide. Site
1 is the first residue in the mature peptide. Any gaps in the reference
alignment are indexed as `<ref_id>+<offset>`, for example 154+1 and 154+2 are
positions 1 and 2 residues after the reference position 154. `flutile` uses the
references from cite:[burke2014] (summarized in table below).

.Subtype references, adapted from cite:[burke2014] 
|===
| subtype  | strain name | signal peptide | mature peptide start

| H1  | A/United Kingdom/1/1933                           | MKARLLVLLCALAATDA   | DTICIGYHANNS

| H2  | A/Singapore/1/1957                                | MAIIYLILLFTAVRG     | DQICIGYHANNS

| H3  | A/Aichi/2/1968                                    | MKTIIALSYIFCLPLG    | QDLPGNDNSTATLCLGHHAVPN

| H4  | A/swine/Ontario/01911–2/1999                      | MLSIAILFLLIAEGSS    | QNYTGNPVICLGHHAVSN

| H5  | A/Vietnam/1203/2004                               | MEKIVLLFAIVSLVKS    | DQICIGYHANNS

| H6  | A/chicken/Taiwan/0705/1999                        | MIAIIVIATLAAAGKS    | DKICIGYHANNS

| H7  | A/Netherlands/219/2003                            | MNTQILVFALVASIPTNA  | DKICLGHHAVSN

| H8  | A/turkey/Ontario/6118/1968                        | MEKFIAIAMLLASTNA    | YDRICIGYQSNNS

| H9  | A/swine/Hong Kong/9/1998                          | MEAASLITILLVVTASNA  | DKICIGYQSTNS

| H10 | A/mallard/bavaria/3/2006                          | MYKIVVIIALLGAVKG    | LDKICLGHHAVAN

| H11 | A/duck/England/1/1956                             | MEKTLLFAAIFLCVKA    | DEICIGYLSNNS

| H12 | A/duck/Alberta/60/1976                            | MEKFIILSTVLAASFA    | YDKICIGYQTNNS

| H13 | A/gull/Maryland/704/1977                          | MALNVIATLTLISVCVHA  | DRICVGYLSTNS

| H14 | A/mallard/Astrakhan/263/1982                      | MIALILVALALSHTAYS   | QITNGTTGNPIICLGHHAVEN

| H15 | A/duck/Australia/341/1983                         | MNTQIIVILVLGLSMVRS  | DKICLGHHAVAN

| H16 | A/black-headed-gull/Turkmenistan/13/1976          | MMIKVLYFLIIVLGRYSKA | DKICIGYLSNNS

| H17 | A/little-yellow-shouldered bat/Guatemala/060/2010 | MELIILLILLNPYTFVLG  | DRICIGYQANQN

| H18 | A/flat-faced bat/Peru/033/2010                    | MITILILVLPIVVG      | DQICIGYHSNNS
|===

 * The H3 signal peptide appears to actually be `MKTIIALSYIFCLALG`

